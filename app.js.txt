<html><head></head><body style="overflow-wrap: break-word; -webkit-nbsp-mode: space; line-break: after-white-space;"><div>import React, { useState, useEffect } from 'react';</div><div>import io from 'socket.io-client';</div><div><br></div><div>const socket = io('http://localhost:5000'); // サーバーのアドレス</div><div><br></div><div>const App = () =&gt; {</div><div>&nbsp; const [status, setStatus] = useState({});</div><div>&nbsp; const [error, setError] = useState(null);</div><div>&nbsp; const [isDarkMode, setIsDarkMode] = useState(true);</div><div><br></div><div>&nbsp; // WebSocketでサーバーと接続し、状態とエラーを監視</div><div>&nbsp; useEffect(() =&gt; {</div><div>&nbsp; &nbsp; socket.on('status_update', (newStatus) =&gt; {</div><div>&nbsp; &nbsp; &nbsp; setStatus(newStatus);</div><div>&nbsp; &nbsp; &nbsp; setError(null); // エラーが解消された場合</div><div>&nbsp; &nbsp; });</div><div><br></div><div>&nbsp; &nbsp; socket.on('error', (errorData) =&gt; {</div><div>&nbsp; &nbsp; &nbsp; setError(errorData.message);</div><div>&nbsp; &nbsp; });</div><div><br></div><div>&nbsp; &nbsp; socket.on('reconnected', () =&gt; {</div><div>&nbsp; &nbsp; &nbsp; setError(null); // 接続回復時にエラーをクリア</div><div>&nbsp; &nbsp; });</div><div><br></div><div>&nbsp; &nbsp; return () =&gt; {</div><div>&nbsp; &nbsp; &nbsp; socket.off('status_update');</div><div>&nbsp; &nbsp; &nbsp; socket.off('error');</div><div>&nbsp; &nbsp; &nbsp; socket.off('reconnected');</div><div>&nbsp; &nbsp; };</div><div>&nbsp; }, []);</div><div><br></div><div>&nbsp; const handleToggle = async (switchNumber, desiredState) =&gt; {</div><div>&nbsp; &nbsp; try {</div><div>&nbsp; &nbsp; &nbsp; const response = await fetch(`/api/toggle?switch_${switchNumber}=${desiredState}`, { method: 'POST' });</div><div>&nbsp; &nbsp; &nbsp; const data = await response.json();</div><div>&nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; if (response.ok) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; setStatus(data); // 成功時に新しいステータスを設定</div><div>&nbsp; &nbsp; &nbsp; } else {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; setError(data.error || '不明なエラーが発生しました');</div><div>&nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; } catch {</div><div>&nbsp; &nbsp; &nbsp; setError('ネットワークエラーが発生しました');</div><div>&nbsp; &nbsp; }</div><div>&nbsp; };</div><div><br></div><div>&nbsp; const toggleTheme = () =&gt; setIsDarkMode(!isDarkMode);</div><div><br></div><div>&nbsp; // スタイル設定（ダークモード/ライトモード）</div><div>&nbsp; const styles = {</div><div>&nbsp; &nbsp; container: {</div><div>&nbsp; &nbsp; &nbsp; display: 'flex',</div><div>&nbsp; &nbsp; &nbsp; flexDirection: 'column',</div><div>&nbsp; &nbsp; &nbsp; alignItems: 'center',</div><div>&nbsp; &nbsp; &nbsp; backgroundColor: isDarkMode ? '#1e1e1e' : '#f2f2f2',</div><div>&nbsp; &nbsp; &nbsp; color: isDarkMode ? '#ffffff' : '#333333',</div><div>&nbsp; &nbsp; &nbsp; minHeight: '100vh',</div><div>&nbsp; &nbsp; &nbsp; padding: '20px',</div><div>&nbsp; &nbsp; &nbsp; transition: 'background-color 0.3s, color 0.3s',</div><div>&nbsp; &nbsp; &nbsp; fontFamily: 'Arial, sans-serif'</div><div>&nbsp; &nbsp; },</div><div>&nbsp; &nbsp; header: {</div><div>&nbsp; &nbsp; &nbsp; display: 'flex',</div><div>&nbsp; &nbsp; &nbsp; justifyContent: 'space-between',</div><div>&nbsp; &nbsp; &nbsp; width: '100%',</div><div>&nbsp; &nbsp; &nbsp; maxWidth: '600px',</div><div>&nbsp; &nbsp; &nbsp; marginBottom: '20px'</div><div>&nbsp; &nbsp; },</div><div>&nbsp; &nbsp; switchContainer: {</div><div>&nbsp; &nbsp; &nbsp; display: 'flex',</div><div>&nbsp; &nbsp; &nbsp; flexDirection: 'column',</div><div>&nbsp; &nbsp; &nbsp; alignItems: 'center',</div><div>&nbsp; &nbsp; &nbsp; width: '100%',</div><div>&nbsp; &nbsp; &nbsp; maxWidth: '600px',</div><div>&nbsp; &nbsp; },</div><div>&nbsp; &nbsp; switchBlock: {</div><div>&nbsp; &nbsp; &nbsp; display: 'flex',</div><div>&nbsp; &nbsp; &nbsp; alignItems: 'center',</div><div>&nbsp; &nbsp; &nbsp; justifyContent: 'space-between',</div><div>&nbsp; &nbsp; &nbsp; width: '100%',</div><div>&nbsp; &nbsp; &nbsp; maxWidth: '600px',</div><div>&nbsp; &nbsp; &nbsp; padding: '10px',</div><div>&nbsp; &nbsp; &nbsp; borderRadius: '8px',</div><div>&nbsp; &nbsp; &nbsp; backgroundColor: isDarkMode ? '#333333' : '#e0e0e0',</div><div>&nbsp; &nbsp; &nbsp; boxShadow: '0px 4px 12px rgba(0, 0, 0, 0.15)',</div><div>&nbsp; &nbsp; &nbsp; marginBottom: '10px',</div><div>&nbsp; &nbsp; &nbsp; transition: 'background-color 0.3s'</div><div>&nbsp; &nbsp; },</div><div>&nbsp; &nbsp; button: {</div><div>&nbsp; &nbsp; &nbsp; padding: '8px 16px',</div><div>&nbsp; &nbsp; &nbsp; fontSize: '14px',</div><div>&nbsp; &nbsp; &nbsp; fontWeight: 'bold',</div><div>&nbsp; &nbsp; &nbsp; color: '#ffffff',</div><div>&nbsp; &nbsp; &nbsp; backgroundColor: isDarkMode ? '#3a86ff' : '#3a86ff',</div><div>&nbsp; &nbsp; &nbsp; border: 'none',</div><div>&nbsp; &nbsp; &nbsp; borderRadius: '8px',</div><div>&nbsp; &nbsp; &nbsp; cursor: 'pointer',</div><div>&nbsp; &nbsp; &nbsp; transition: 'background-color 0.3s',</div><div>&nbsp; &nbsp; &nbsp; boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.2)',</div><div>&nbsp; &nbsp; &nbsp; outline: 'none',</div><div>&nbsp; &nbsp; },</div><div>&nbsp; &nbsp; toggleButton: {</div><div>&nbsp; &nbsp; &nbsp; padding: '8px 16px',</div><div>&nbsp; &nbsp; &nbsp; fontSize: '14px',</div><div>&nbsp; &nbsp; &nbsp; color: isDarkMode ? '#ffffff' : '#333333',</div><div>&nbsp; &nbsp; &nbsp; backgroundColor: isDarkMode ? '#ffbe0b' : '#ffbe0b',</div><div>&nbsp; &nbsp; &nbsp; border: 'none',</div><div>&nbsp; &nbsp; &nbsp; borderRadius: '20px',</div><div>&nbsp; &nbsp; &nbsp; cursor: 'pointer',</div><div>&nbsp; &nbsp; &nbsp; transition: 'background-color 0.3s, color 0.3s',</div><div>&nbsp; &nbsp; &nbsp; boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.2)',</div><div>&nbsp; &nbsp; },</div><div>&nbsp; &nbsp; error: {</div><div>&nbsp; &nbsp; &nbsp; color: '#ff4d4d',</div><div>&nbsp; &nbsp; &nbsp; marginBottom: '20px',</div><div>&nbsp; &nbsp; &nbsp; fontWeight: 'bold',</div><div>&nbsp; &nbsp; }</div><div>&nbsp; };</div><div><br></div><div>&nbsp; return (</div><div>&nbsp; &nbsp; &lt;div style={styles.container}&gt;</div><div>&nbsp; &nbsp; &nbsp; &lt;div style={styles.header}&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &lt;h1&gt;デバイス管理&lt;/h1&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &lt;button style={styles.toggleButton} onClick={toggleTheme}&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {isDarkMode ? 'ライトモード' : 'ダークモード'}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &lt;/button&gt;</div><div>&nbsp; &nbsp; &nbsp; &lt;/div&gt;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; {error &amp;&amp; &lt;div style={styles.error}&gt;{error}&lt;/div&gt;}</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &lt;div style={styles.switchContainer}&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; {Object.keys(status).map((key) =&gt; (</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;div key={key} style={styles.switchBlock}&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;span&gt;{key}: {status[key] ? 'ON' : 'OFF'}&lt;/span&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;button</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; style={{ ...styles.button, backgroundColor: status[key] ? '#ff595e' : '#8ac926' }}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onClick={() =&gt; handleToggle(key.split('_')[1], status[key] ? 0 : 1)}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {status[key] ? 'OFFにする' : 'ONにする'}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/button&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ))}</div><div>&nbsp; &nbsp; &nbsp; &lt;/div&gt;</div><div>&nbsp; &nbsp; &lt;/div&gt;</div><div>&nbsp; );</div><div>};</div><div><br></div><div>export default App;</div><div><br></div></body></html>